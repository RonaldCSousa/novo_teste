import pandas as pd
import plotly.express as px
import streamlit as st

st.set_page_config(
    page_title="TESTE",
    page_icon="üßä",
    layout="wide",
)

with st.sidebar:
    st.write("Testes Ronald")

def color_coding(value, min_val, max_val):
    """ Fun√ß√£o para aplicar um novo tom de laranja, come√ßando suavemente e intensificando-se. """
    # Normalizar o valor
    relative_val = (value - min_val) / (max_val - min_val) if max_val > min_val else 0
    # Interpolar de laranja muito suave para laranja mais saturado
    red = 255
    green = int(210 - (150 * relative_val))  # Come√ßar com verde suave (210) at√© 60 (laranja saturado)
    blue = int(180 - (180 * relative_val))   # Come√ßar com azul suave (180) at√© 0 (laranja saturado)
    color_bg = f'rgb({red}, {green}, {blue})'
    color_font = 'black' if relative_val < 0.7 else 'white'  # Mudan√ßa da cor da fonte para contraste
    return f'background-color: {color_bg}; color: {color_font}; font-weight: bold'


# Dados de exemplo com intervalos variados para cada manuten√ß√£o
data = {
    'Tipo de Manuten√ß√£o': [
        'Ar Condicionado', 'Ar Condicionado', 'Ar Condicionado',
        'El√©trica', 'El√©trica', 'El√©trica',
        'Civil', 'Civil', 'Civil',
        'Hidr√°ulica', 'Hidr√°ulica', 'Hidr√°ulica',
        'Mec√¢nica', 'Mec√¢nica', 'Mec√¢nica'
    ],
    'inicio': pd.to_datetime([
        '2024-01-01', '2024-04-15', '2024-07-20',
        '2024-01-15', '2024-05-16', '2024-09-10',
        '2024-02-01', '2024-05-19', '2024-08-25',
        '2024-02-15', '2024-06-10', '2024-10-05',
        '2024-03-05', '2024-07-15', '2024-11-01'
    ]),
    'fim': pd.to_datetime([
        '2024-02-05', '2024-05-15', '2024-08-20',
        '2024-03-20', '2024-06-20', '2024-11-10',
        '2024-03-03', '2024-06-19', '2024-09-25',
        '2024-04-10', '2024-07-10', '2024-11-20',
        '2024-04-05', '2024-08-15', '2024-12-01'
    ])
}

df = pd.DataFrame(data)

# Criar gr√°fico de Gantt
fig = px.timeline(df, x_start="inicio", x_end="fim", y="Tipo de Manuten√ß√£o", color="Tipo de Manuten√ß√£o", labels={"Tipo de Manuten√ß√£o": "Tipo de Manuten√ß√£o"})

# Data da reforma
data_reforma = pd.to_datetime('2024-05-16')

# Adicionar linha vertical para a data da reforma
fig.add_vline(x=data_reforma, line_width=2, line_dash="dash", line_color="red")

# Configura√ß√µes adicionais para melhor visualiza√ß√£o
fig.update_yaxes(categoryorder="total ascending")  # Organiza as tarefas no eixo Y pela ordem de in√≠cio

# Mostrar o gr√°fico no Streamlit
st.plotly_chart(fig,use_container_width=True)

# Ordenar por 'Tipo de Manuten√ß√£o' e 'inicio'
df.sort_values(by=['Tipo de Manuten√ß√£o', 'inicio'], inplace=True)

# Calcular a diferen√ßa de dias entre o fim de uma manuten√ß√£o e o in√≠cio da pr√≥xima
df['Pr√≥ximo In√≠cio'] = df.groupby('Tipo de Manuten√ß√£o')['inicio'].shift(-1)
df['Dias at√© pr√≥xima manuten√ß√£o'] = (df['Pr√≥ximo In√≠cio'] - df['fim']).dt.days

# Segmentar as manuten√ß√µes antes e depois da data da reforma
df['Per√≠odo'] = df['inicio'].apply(lambda x: 'Antes da Reforma' if x < data_reforma else 'Depois da Reforma')

# Calcular a m√©dia de dias at√© a pr√≥xima manuten√ß√£o para cada tipo e per√≠odo
media_dias_periodo = df.groupby(['Tipo de Manuten√ß√£o', 'Per√≠odo'])['Dias at√© pr√≥xima manuten√ß√£o'].mean().unstack()

# Contar quantas manuten√ß√µes por tipo e por per√≠odo
contagem_manutencoes = df.groupby(['Tipo de Manuten√ß√£o', 'Per√≠odo']).size().unstack(fill_value=0)


col_media_dias, col_divisor,col_manut_antes_depois = st.columns([2,0.01,2])


with col_media_dias:
    # Exibir a m√©dia de dias no Streamlit
    st.write("M√©dia de dias at√© a pr√≥xima manuten√ß√£o por tipo e per√≠odo:")
    st.dataframe(media_dias_periodo,use_container_width=True)


with col_manut_antes_depois:

    min_val = contagem_manutencoes.min().min()
    max_val = contagem_manutencoes.max().max()

    styled_pivot_df = contagem_manutencoes.style.applymap(lambda x: color_coding(x, min_val, max_val))

    # Exibir a contagem de manuten√ß√µes no Streamlit
    st.write("Quantidade de manuten√ß√µes por tipo e per√≠odo:")
    st.dataframe(styled_pivot_df, use_container_width=True)